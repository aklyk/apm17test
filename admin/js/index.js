!function(e){var t={};function n(r){if(t[r])return t[r].exports;var l=t[r]={i:r,l:!1,exports:{}};return e[r].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(r,l,function(t){return e[t]}.bind(null,l));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r{getParent(){return this.btn.parentNode}getGrand(){return this.getParent().parentNode}}class l{generateElement(e){let t=this.generateByNameOfEl(e.el,e.children);for(let n of e.options)t.setAttribute(n.name,n.value);return t}generateByNameOfEl(e,t){let n=document.createElement(e);for(let e of this.getMarkup(t))void 0!==e&&n.appendChild(e);return n}getMarkup(e){let t=!0,n=this.generateMarkup(e),r=[];for(;t;){let e=n.next();try{t=!e.done,r.push(e.value)}catch(e){}}return r}*generateMarkup(e){for(let t of e){let e=this.prepareChildOfEl(t);if(t.children)for(let n of t.children)e.appendChild(this.prepareChildOfEl(n));yield e}}prepareChildOfEl(e){let t=document.createElement(e.el),n=document.createTextNode(e.text?e.text:""),r=e.options?e.options:[];e.text&&t.appendChild(n);for(let e of r)t.setAttribute(e.name,e.value);return e.event&&t.addEventListener(e.event,e.callBack),t}}class s{usualStringIsCorrect(e){let t=/[а-яА-Яa-zA-Z0-9\s\.\,]/,n=!0;for(let r of e)n=n&&t.test(r);return n}dateIsCorrect(e){return/\d{4}\-\d{1,2}\-\d{1,2}/.test(e)}urlIsCorrect(e){return/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i.test(e)}}class a{post(e,t){let n={method:"POST",file:e,data:t};return this.sendRequest(n)}get(e,t){let n={method:"GET",file:e,data:t};return this.sendRequest(n)}sendRequest(e){return new Promise((t,n)=>{let r,l=new XMLHttpRequest;l.open(e.method,e.file),"POST"==e.method&&l.setRequestHeader("Content-type","application/x-www-form-urlencoded"),l.send(e.data),l.onreadystatechange=(()=>{4==l.readyState&&200==l.status&&((r=JSON.parse(l.responseText)).errorMessage?n(r.errorMessage):t(r))})})}}const i=new class extends r{delete(e){this.btn=e,this.getGrand().removeChild(this.getParent())}},o=new class extends r{constructor(){super(...arguments),this.g=new l}insert(e){this.btn=e,this.getParent().insertBefore(this.getUrlInput(),this.btn)}getUrlInput(){return this.g.generateByNameOfEl(p.el,p.children)}},u=new class{constructor(){this.http=new a,this.ic=new s,this.PATH=document.location.origin+"/admin/php/",this.BODY=document.body,this.mw=null,this.inputFields=[],this.fileToSend=this.PATH}collectData(e){for(let t of e.attributes)"file"==t.name&&(this.fileToSend+=t.value);let t,n=Array.from(e.getElementsByTagName("input")),r=e.getElementsByTagName("textarea")[0].id;this.mw=e,r&&(t=document.getElementById(r),this.inputFields.push({type:"text",value:t.value,name:t.id}));for(let e of n)this.inputFields.push({type:e.type,value:e.value,name:e.id});this.inputIsCorrect()?this.send():this.onError("Incorrect input data")}inputIsCorrect(){let e=!0;for(let t of this.inputFields){let n=this.findMethodForChecking(t.type);e=e&&this.checkField(n,t.value)}return e}findMethodForChecking(e){switch(e){case"text":return this.ic.usualStringIsCorrect;case"url":return this.ic.urlIsCorrect;case"date":return this.ic.dateIsCorrect;default:return()=>!1}}checkField(e,t){try{if(!e(t))throw new Error(t);return!0}catch(e){return this.onError(e),!1}}send(){this.http.post(this.fileToSend,JSON.stringify(this.inputFields)).then(()=>{this.onSuccess()}).catch(e=>{this.onError(e)})}onSuccess(){alert("Successfully!"),this.BODY.removeChild(this.mw),this.destructor()}onError(e){alert(e),this.destructor()}destructor(){this.fileToSend=this.PATH,this.inputFields=[],this.mw=null}},c={el:"br"},d={el:"div",children:[{el:"i",event:"click",callBack:e=>i.delete(e.srcElement),options:[{name:"class",value:"fas fa-window-close closeBtn"}]},{el:"h2",text:"Добавление задания"},{el:"p",text:"Название: ",children:[{el:"input",options:[{name:"type",value:"text"},{name:"id",value:"nameOfTask"}]}]},{el:"p",text:"Дата сдачи: ",children:[{el:"input",options:[{name:"type",value:"date"},{name:"id",value:"dateToPass"}]}]},{el:"textarea",options:[{name:"id",value:"describtion"}]},c,{el:"i",event:"click",callBack:e=>o.insert(e.srcElement.parentElement),children:[{el:"i",options:[{name:"class",value:"fas fa-plus-circle"}]},{el:"span",text:"Добавить ссылку на картинку"}],options:[{name:"class",value:"add"}]},c,{el:"button",text:"Добавить",event:"click",callBack:e=>u.collectData(e.srcElement.parentElement),options:[{name:"id",value:"addTask"},{name:"class",value:"btn btn-success"}]},{el:"button",text:"Отмена",event:"click",callBack:e=>i.delete(e.srcElement),options:[{name:"id",value:"closeWindow"},{name:"class",value:"closeBtn"}]}],options:[{name:"class",value:"modalWindow"},{name:"file",value:"addTask.php"}]},p={el:"p",children:[{el:"input",options:[{name:"type",value:"url"},{name:"class",value:"urlToImg"},{name:"placeholder",value:"http://url.ru"}]},{el:"i",event:"click",callBack:e=>i.delete(e.srcElement),options:[{name:"class",value:"fas fa-trash-alt closeBtn"}]}]};window.onload=function(){let e=new l;document.getElementById("addTask").onclick=(()=>document.body.appendChild(e.generateElement(d)))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,