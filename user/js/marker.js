!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class n{post(e,t){let r={method:"POST",file:e,data:t};return this.sendRequest(r)}get(e,t){let r={method:"GET",file:e,data:t};return this.sendRequest(r)}sendRequest(e){return new Promise((t,r)=>{let n,s=new XMLHttpRequest;s.open(e.method,e.file),"POST"==e.method&&s.setRequestHeader("Content-type","application/x-www-form-urlencoded"),s.send(e.data),s.onreadystatechange=(()=>{4==s.readyState&&200==s.status&&((n=JSON.parse(s.responseText)).errorMessage?r(n.errorMessage):t(n))})})}}!function(){const e=new class{constructor(){this.http=new n,this.PATH=document.location.origin,this.fileToSend=`${this.PATH}/user/php/update/markAsCompleted.php`}collectAndSend(e){this.marker=e,this.ids={idOfRecord:parseInt(e.id),idOfUser:parseInt(e.dataset.userId)},this.stringifyData()}stringifyData(){this.data=JSON.stringify(this.ids),this.send()}send(){this.http.post(this.fileToSend,this.data).then(()=>{this.removeTask(),this.destructor()}).catch(e=>{this.onError(e)})}removeTask(){let e=this.marker.parentNode.parentNode;this.marker.parentNode.parentNode.parentNode.removeChild(e)}destructor(){this.ids=null,this.data=null,this.marker=null}onError(e){alert(e)}},t=document.getElementsByClassName("markAsCompleted");for(let r of t)r.addEventListener("click",()=>{e.collectAndSend(r)})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,